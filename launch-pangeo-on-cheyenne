#!/bin/bash
#
# USAGE: Launch this script from a local machine, it will connect to cheyenne as needed
# Required arguments:
# - user name
# - account key to charge
#
# Optional arguments:
# - job id OR job name (if reconnecting to existing lab)
# - walltime requested (default 3 hours)
#
# Things user can change by editing script:
# - queue / node & core count (recommend requesting single core via share queue)
# - root directory to launch lab from (default: /glade/work/$USER)
#
# ABOUT:
# This script handles two distinct tasks:
# 1. submit a job to cheyenne queue to start jupyter remotely
#    - wait for the job to start running
#    - output remote host on which the job is running
# 2. ssh tunnel to the remote cheyenne node to forward jupyter and dask ports
#    (8888 and 8787, respectively)
#
# ^C will break the ssh tunnel, but will not kill the cheyenne job
# => also want a way to skip step 1 and connect to a running job
#

function usage () {
  echo "$($0 -h)"
}
# Parse getopts
# Abort if user not specified
WALLTIME="4:00:00"
while getopts "u:A:i:H:w:h" opt; do
  case $opt in
    u)
      REM_USER=$OPTARG
    ;;
    A)
      ACCOUNT=$OPTARG
    ;;
    i)
      JOBID=$OPTARG
    ;;
    H)
      REM_HOST=$OPTARG
    ;;
    w)
      WALLTIME=$OPTARG
    ;;
    h|\?)
      echo "Usage: $(basename $0) -u USERNAME [-A ACCOUNT] [-i JOBID] [-H REMHOST] [-w WALLTIME]"
      echo "       USERNAME - ssh to cheyenne with 'ssh USERNAME@cheyenne.ucar.edu'"
      echo "       ACCOUNT - account key to charge for running jupyter lab"
      echo "       JOBID - Existing job ID of jupyter lab running on cheyenne"
      echo "       REMHOST - Compute node currently running jupyter lab"
      echo "       WALLTIME - walltime for job on share queue running jupyter lab (default: 4:00:00)"
      echo " USERNAME is always required. Provide ACCOUNT to launch a new job, otherwise"
      echo " provide either JOBID or REMHOST"
      exit 0
    ;;
    *)
      echo "Invalid option: -$opt" >&2
      exit 1
    ;;
  esac
done

# Check for required arguments
# Always require user for logging in to cheyenne
# Either need account to charge (for launching jupyter) OR a job id / compute node name of running jupyter
if { [ -z $ACCOUNT ] && [ -z $JOBID ] && [ -z $REM_HOST ]; } || [ -z $REM_USER ]; then
  usage
  exit 1
fi

#######################################
### THIS FUNCTION LAUNCHES JUPYTER
### (RUN IT ON CHEYENNE)
function launch_job () {
  # Several variables passed through call to launch_job
  REM_USER=$1
  ACCOUNT=$2
  WALLTIME=$3

  ### OPTIONS THAT USERS SHOULD SET FOR CHEYENNE
  QUEUE=share
  NODES=1
  CORES=1
  ROOT_PATH=/glade/work/${REM_USER}/
  SET_PY_ENV="source activate pangeo"
  LAUNCH_JLAB=./codes/pangeo-tutorial-august-2018/start-jlab

  # 1) Submit job
  s=$(qsub << EOF
  #!/bin/bash
  #PBS -N pangeo
  #PBS -q ${QUEUE}
  #PBS -A ${ACCOUNT}
  #PBS -l select=${NODES}:ncpus=${CORES}:mpiprocs=${CORES}
  #PBS -l walltime=$WALLTIME
  #PBS -j oe

  module purge
  export LD_LIBRARY_PATH=
  ${SET_PY_ENV}
  cd ${ROOT_PATH}
  ${LAUNCH_JLAB}
EOF
  )
  SJOB=${s%.*}

  # 2) Kill job that hasn't started yet with ^C
  trap ctrl_c INT HUP
  function ctrl_c() {
    echo ""
    echo "Killing ${SJOB}"
    qdel ${SJOB}
    exit 0
  }

  # 3) Wait for job to start
  echo -n "waiting for job to run"
  while [ 1 ]; do
      #-- get job status
      STATE=$(qstat -x -f ${SJOB} | grep job_state | awk -F= '{print $2}')
      HOST=$(qstat -x -f ${SJOB} | grep exec_host | awk -F= '{print $2}')
      if [[ -n "${HOST}" && "${STATE}" =~ R ]]; then
        echo " run started!"
        echo "Job ID: ${SJOB}"
        echo "Job host: ${HOST}"
        break
      elif [[ ${STATE} =~ F ]]; then
        echo " run failed:"
        qstat -x -f  ${SJOB}
        exit 1
      else
        echo -n "."
      fi
      sleep 1
  done
}
#######################################

#######################################
### THIS FUNCTION CREATES SSH TUNNEL
### ALLOWS USERS TO ACCESS JUPYTER
### (RUNNING ON CHEYENNE) VIA
### https://localhost:8888
### ALSO FORWARDS DASK DASHBOARD TO
### https://localhost:8787
function create_tunnel () {
  cmd="ssh -N -l ${REM_USER} -L 8888:${REM_HOST}:8888 -L 8787:${REM_HOST}:8787 cheyenne.ucar.edu"
  echo $cmd
  nohup $cmd &
  tunnel=$!

  # ^C should kill the tunnels
  trap "kill -9 $tunnel; rm -f .last_run* nohup.out; exit 0" INT

  echo "Use ^C to kill ssh tunnel"
  while [ 1 ]; do
    sleep 1
  done
}
#######################################

#######################################
### MAIN SCRIPT
# 1) RUN launch_job ON CHEYENNE
if [ -z $JOBID ] && [ -z $REM_HOST ]; then
  ssh ${REM_USER}@cheyenne.ucar.edu /bin/bash << EOF | tee .last_run.log
    $(declare -f launch_job)
    launch_job ${REM_USER} ${ACCOUNT} ${WALLTIME}
EOF
  REM_HOST=`grep Job\ host .last_run.log | cut -d ':' -f 2 | cut -d '/' -f 1 | tr -d ' '`
fi

# 2) RUN create_tunnel AFTER CHEYENNE JOB LAUNCHES
if [ -z $REM_HOST ]; then
  if [ ! -z $JOBID ]; then
    echo "Getting remote host from Job ID..."
    ssh ${REM_USER}@cheyenne.ucar.edu /bin/bash << EOF | tee .last_run.host
    echo `qstat -x -f $JOBID | grep exec_host | awk -F= '{print $2}'`
EOF
    REM_HOST=`cat .last_run.host | cut -d '/' -f 1`
    if [ -z $REM_HOST ]; then
      echo "Unable to determine host from provided job ID"
      exit 1
    fi
  else
    echo "Can not determine remote host!"
    exit 1
  fi
fi
if [ $? -eq 0 ]; then
  create_tunnel
fi