#!/bin/bash
#
# USAGE: Launch this script from a local machine, it will connect to cheyenne as needed
# Required arguments (one of the following):
# - account key to charge
# - job id to reconnect to
# - remote host running (to reconnect to)
# - job id to kill to stop jupyter
#
# Optional arguments:
# - user name
# - walltime requested (default 3 hours)
#
# Things user can change by editing script:
# - queue / node & core count (recommend requesting single core via share queue)
# - root directory to launch lab from (default: /glade/work/$USER)
#
# ABOUT:
# This script handles two distinct tasks:
# 1. submit a job to cheyenne queue to start jupyter remotely
#    - wait for the job to start running
#    - output remote host on which the job is running
# 2. ssh tunnel to the remote cheyenne node to forward jupyter to localhost:8888
#
# ^C will break the ssh tunnel, but will not kill the cheyenne job
# => also want a way to skip step 1 and connect to a running job
#

function usage () {
  echo "$($0 -h)"
}
# Parse getopts
# Abort if user not specified
REM_USER=$USER
WALLTIME="4:00:00"
CONDA_ENV=pangeo-cheyenne
while getopts "u:l:A:i:H:w:k:e:h" opt; do
  case $opt in
    u|l)
      REM_USER=$OPTARG
    ;;
    A)
      ACCOUNT=$OPTARG
    ;;
    i)
      JOBID=$OPTARG
    ;;
    H)
      REM_HOST=$OPTARG
    ;;
    w)
      WALLTIME=$OPTARG
    ;;
    k)
      JOBID_TO_KILL=$OPTARG
    ;;
    e)
      CONDA_ENV=$OPTARG
    ;;
    h|\?)
      echo "Usage: $(basename $0) [-u USERNAME] [-A ACCOUNT] [-i JOBID] [-k JOBID_TO_KILL]"
      echo "                      [-H REMHOST] [-w WALLTIME] [-e CONDA_ENV]"
      echo "       USERNAME - ssh to cheyenne with 'ssh USERNAME@cheyenne.ucar.edu' (default: username on local machine, i.e. $USER)"
      echo "       ACCOUNT - account key to charge for running jupyter lab (default: cheyenne env var \$PBS_ACCOUNT)"
      echo "       JOBID - Existing job ID of jupyter lab running on cheyenne (to tunnel into)"
      echo "       JOBID_TO_KILL - Existing job ID of jupyter lab running on cheyenne (to kill the job)"
      echo "       REMHOST - Compute node currently running jupyter lab"
      echo "       WALLTIME - walltime for job on share queue running jupyter lab (default: 4:00:00)"
      echo "       CONDA_ENV - name of conda environment that contains jupyter lab (default: pangeo-cheyenne)"
      echo " NOTES:"
      echo "        1. If you are launching a new jupyter lab instance, an account key is required."
      echo "           If ACCOUNT is not specified, this script will look for \$PBS_ACCOUNT on cheyenne,"
      echo "           but if that environment variable is not set then the script will abort."
      exit 0
    ;;
    *)
      echo "Invalid option: -$opt" >&2
      exit 1
    ;;
  esac
done

#######################################
### THIS FUNCTION LAUNCHES JUPYTER
### (RUN IT ON CHEYENNE)
function launch_job () {
  # Several variables passed through call to launch_job
  REM_USER=$1
  WALLTIME=$2
  CONDA_ENV=$3
  ACCOUNT=$4
  if [ -z $ACCOUNT ]; then
    ACCOUNT=${PBS_ACCOUNT}
  fi
  if [ -z $ACCOUNT ]; then
    echo "Can not find an account key to use, please specify one with -A"
    exit 1
  fi

  ### OPTIONS THAT USERS SHOULD SET FOR CHEYENNE
  QUEUE=share
  NODES=1
  CORES=1
  ROOT_PATH=/glade/work/${REM_USER}/
  SET_PY_ENV="source activate ${CONDA_ENV}"

  # 1) Clean up output file, then submit job
  rm -f ${ROOT_PATH}/.jupyter_lab.log
  s=$(qsub << EOF
  #!/bin/bash
  #PBS -N pangeo
  #PBS -q ${QUEUE}
  #PBS -A ${ACCOUNT}
  #PBS -l select=${NODES}:ncpus=${CORES}:mpiprocs=${CORES}
  #PBS -l walltime=$WALLTIME
  #PBS -j oe

  module purge
  export LD_LIBRARY_PATH=
  ${SET_PY_ENV}
  cd ${ROOT_PATH}
  # FIXME: how do I get the correct hostname here?
  #        (this returns empty string)
  echo "hostname = $(echo '$(hostname)')" > .jupyter_lab.log
  jupyter lab --no-browser --ip=`echo "$(echo '$(hostname)')"` 2>&1 | tee -a .jupyter_lab.log
EOF
  )
  SJOB=${s%.*}

  # 2) Kill job that hasn't started yet with ^C
  trap ctrl_c INT HUP
  function ctrl_c() {
    echo ""
    echo "Killing ${SJOB}"
    qdel ${SJOB}
    exit 0
  }

  # 3) Wait for job to start
  date
  echo -n "waiting for job to run"
  while [ 1 ]; do
      #-- get job status
      STATE=$(qstat -x -f ${SJOB} | grep job_state | awk -F= '{print $2}')
      HOST=$(qstat -x -f ${SJOB} | grep exec_host | awk -F= '{print $2}' | cut -d '/' -f 1)
      if [[ -n "${HOST}" && "${STATE}" =~ R ]]; then
        echo "."
        echo "Run started!"
        date
        echo "Job ID: ${SJOB}"
        echo "Job host: ${HOST}"
        break
      elif [[ ${STATE} =~ F ]]; then
          echo " run failed:"
        qstat -x -f  ${SJOB}
        exit 1
      else
        echo -n "."
      fi
      sleep 1
  done

  echo "Waiting for job to start writing log file..."
  while [ ! -e ${ROOT_PATH}/.jupyter_lab.log ]; do
    sleep 1
  done

  # 4) After job is running, figure out correct ssh command / token
  #    Then return the jupyter port number
  WAITTIME=0
  while [ 1 ]; do
    ADDRESS=`grep -e '^\[.*\]\s*http://.*:.*/\?token=.*' ${ROOT_PATH}/.jupyter_lab.log | head -n 1 | awk -F'//' '{print $NF}'`
    if [ ! -z $ADDRESS ]; then
      break
    fi
    if [ $WAITTIME -gt 30 ]; then
      echo "It's taking too long to launch jupyter lab, aborting!"
      echo "Here's what was in the jupyter lab log:"
      cat ${ROOT_PATH}/.jupyter_lab.log
      qdel ${SJOB}
      exit 1
    fi
    sleep 1
    WAITTIME=$((WAITTIME + 1))
  done
  PORT=$(echo $ADDRESS | awk -F':' ' { print $2 } ' | awk -F'/' ' { print $1 } ')
  TOKEN=$(echo $ADDRESS | awk -F'=' ' { print $NF } ')

  echo "Port to forward for jupyter lab: $PORT"
  echo "Token for jupyter lab: $TOKEN"
}
#######################################

#######################################
### THIS FUNCTION CREATES SSH TUNNEL
### ALLOWS USERS TO ACCESS JUPYTER
### (RUNNING ON CHEYENNE) VIA
### https://localhost:8888
function create_tunnel () {
  cmd="ssh -N -l ${REM_USER} -L 8888:${REM_HOST}:${PORT} cheyenne.ucar.edu"
  echo $cmd
  nohup $cmd &
  tunnel=$!

  # ^C should kill the tunnels
  trap "kill -9 $tunnel; rm -f .last_run* nohup.out; exit 0" INT

  echo "Use ^C to kill ssh tunnel"

  if [ `uname` == "Darwin" ]; then
    # Listen to :8888, open jupyter web page when tunnel is connected
    while [ -z `lsof -Pi :8888 -sTCP:LISTEN` ]; do
      sleep 1
    done
    echo "Opening jupyter lab!"
    open http://localhost:8888
  fi
  while [ 1 ]; do
    sleep 1
  done
}
#######################################

#######################################
### MAIN SCRIPT
# KILL JOB IF REQUESTED
if [ ! -z $JOBID_TO_KILL ]; then
  echo "Killing $JOBID_TO_KILL..."
  ssh ${REM_USER}@cheyenne.ucar.edu "qdel $JOBID_TO_KILL"
  rm -f .port .token
  exit 0
fi

# RUN launch_job ON CHEYENNE
if [ -z $JOBID ] && [ -z $REM_HOST ]; then
  rm -f .port .token .last_run.log
  ssh ${REM_USER}@cheyenne.ucar.edu /bin/bash << EOF | tee .last_run.log
    $(declare -f launch_job)
    launch_job ${REM_USER} ${WALLTIME} ${CONDA_ENV} ${ACCOUNT}
EOF
  REM_HOST=`grep Job\ host .last_run.log | cut -d ':' -f 2 | tr -d ' '`
  PORT=`grep Port\ to\ forward .last_run.log | cut -d ':' -f 2 | tr -d ' '`
  TOKEN=`grep Token\ for\ jupyter .last_run.log | cut -d ':' -f 2 | tr -d ' '`
  echo $PORT > .port
  echo $TOKEN > .token
fi

# RUN create_tunnel AFTER CHEYENNE JOB LAUNCHES
if [ -z $REM_HOST ]; then
  if [ ! -z $JOBID ]; then
    echo "Getting remote host from Job ID..."
    ssh ${REM_USER}@cheyenne.ucar.edu /bin/bash << EOF | tee .last_run.host
    \qstat -x -f $JOBID | grep exec_host | awk -F= '{print $2}'
EOF
    REM_HOST=`cat .last_run.host | cut -d '/' -f 1`
    if [ -z $REM_HOST ]; then
      echo "Unable to determine host from provided job ID"
      exit 1
    fi
  else
    echo "Can not determine remote host!"
    exit 1
  fi
fi
if [ $? -eq 0 ]; then
  if [ -z $PORT ]; then
    PORT=`cat .port`
  fi
  if [ -z $TOKEN ]; then
    echo "Reminder: your jupyter token is $TOKEN"
  fi
  create_tunnel
fi
